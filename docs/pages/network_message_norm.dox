/**
 * @page network_message_norm Network Message Norm Documentation
 *
 * @section overview Overview
 *
 * This document defines the standard message formats utilised by the server 
 * in our network application. There are two types of message formats:
 * 1. JSON format for messages related to the Entity Component System (ECS).
 * 2. A simpler, space-separated format for purely network-related messages.
 *
 * The JSON message norm is designed for consistency, efficiency, and simplicity in parsing. 
 * The IP address is only included in the initialisation message and not in the subsequent messages.
 *
 * @section message_format Message Format
 *
 * @subsection json_format JSON Format
 *
 * Used for ECS-related messages. Example of an entity with the Health, Position and Velocity components:
 * \verbatim
   {
       "Health": 100,
       "Position": {"x": 10, "y": 20},
       "Velocity": {"x": 5, "y": 5, "speed": 30}
   }
   \endverbatim
 * Subsequent messages omit the IP address and follow a similar structure.
 *
 * @subsection network_format Network Message Format
 *
 * For purely network-related communications, a simpler format is used, as demonstrated below:
 * \verbatim
   sender.send("new player " + _input_frames_state.at(0).second + " " + _received_ip + ":" + std::to_string(_received_port));
   \endverbatim
 * This format typically includes one of the commands new, delete or start followed by program specific elements.
 * In this demo we are sending to the server that a new player is initialised.
 *
 * @section rules Rules
 *
 * 1. <b>Key Uniqueness</b> (JSON Format): Ensure every key in a JSON message is distinct.
 * 2. <b>Data Types</b> (JSON Format): Supports various JSON data types like numbers, strings, arrays, and objects.
 * 3. <b>Formatting Consistency</b> (Network Format): Maintain consistent spacing and order in network messages.
 *
 * @section example_messages Example Messages
 *
 * 1. <b>Bullet information message (JSON)</b>: 
 *    \verbatim 
 [{"Bullet":{"id":"2"},"Position":{"x":"145.000000","y":"185.000000"}}];
 \endverbatim
 *    This message is sent once a bullet is shot.
 *
 * 2. <b>Standard Message (JSON)</b>:
 *    \verbatim
 {
   "Health": 80,
   "Position": {"x": 15, "y": 25},
   "Velocity": {"x": 10, "y": 10, "speed": 35}
 }
 \endverbatim
 *    Subsequent JSON messages follow this format, omitting the IP address.
 *
 * 3. <b>Network Command Example</b>:
 *    \verbatim
   sender.send("new player " + _input_frames_state.at(0).second + " " + _received_ip + ":" + std::to_string(_received_port));
 \endverbatim
 *    Example of a network-related message, using a simple, space-separated format.
 *
 * @section parsing Parsing
 * 
 * JSON messages should be interpreted using a reliable JSON parser, ensuring accurate interpretation of JSON syntax. 
 * Network messages require parsing based on space separation and appropriate handling of individual components.
 */
