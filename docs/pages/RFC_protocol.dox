/**
 * @page network_protocol_rfc Network Protocol RFC Documentation
 *
 * @section abstract Abstract
 *
 * This document describes a network protocol for communication between components of a networked game engine. The protocol uses UDP (User Datagram Protocol) for efficient and low-latency communication. It is designed for educational purposes as part of a school project.
 *
 * @section table_of_contents Table of Contents
 *
 * 1. @ref introduction
 * 2. @ref protocol_overview
 *     - @ref components
 *     - @ref message_exchange
 * 3. @ref message_format
 * 4. @ref sender_behavior
 * 5. @ref receiver_behavior
 * 6. @ref error_handling
 * 7. @ref security_considerations
 * 8. @ref conclusion
 * 9. @ref references
 *
 * @section introduction 1. Introduction
 *
 * This document provides an overview and detailed specifications of a network protocol used in a networked game engine. The protocol is intended for educational purposes and utilizes UDP for communication.
 *
 * @section protocol_overview 2. Protocol Overview
 *
 * @subsection components 2.1. Components
 *
 * The protocol consists of two main components:
 * - Sender: Responsible for sending messages to a specified IP address and UDP port.
 * - Receiver: Listens for incoming messages on a specified UDP port and processes them asynchronously.
 *
 * @subsection message_exchange 2.2. Message Exchange
 *
 * Messages are exchanged between the sender and the receiver using UDP datagrams. The sender sends messages to a specific IP address and UDP port, while the receiver listens on the designated UDP port for incoming messages.
 *
 * @section message_format 3. Message Format
 *
 * Messages exchanged between the sender and the receiver have a simple format:
 * - Payload: The content of the message, typically a string.
 *
 * Please see the @ref network_message_norm "Network Message Norm Documentation" for the Network Message Norm Documentation.
 * @section sender_behavior 4. Sender Behavior
 *
 * The sender class has a `send` method that allows the sending of messages. It opens a UDP socket, sends the message payload to the specified IP address and UDP port, and then closes the socket.
 *
 * @section receiver_behavior 5. Receiver Behavior
 *
 * The receiver class sets up a UDP socket, binds it to a specified UDP port, and enters a loop to listen for incoming messages. When a message is received, it processes it asynchronously.
 *
 * @section error_handling 6. Error Handling
 *
 * Both the sender and the receiver implement basic error handling. Errors are logged, but no sophisticated error recovery mechanisms are included in this protocol.
 *
 * @section security_considerations 7. Security Considerations
 *
 * This protocol does not include any security features. It is intended for educational purposes only and should not be used in production environments without implementing appropriate security measures.
 *
 * @section conclusion 8. Conclusion
 *
 * The described network protocol provides a simple foundation for communication between components of a networked game engine. It uses UDP for low-latency communication and serves as a starting point for further development and learning.
 *
 * @section references 9. References
 *
 * - [Boost.Asio Documentation](https://www.boost.org/doc/libs/1_77_0/doc/html/boost_asio.html) - Reference documentation for the Boost.Asio library.
 */
